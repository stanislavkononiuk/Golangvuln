$ govulncheck -h
Command govulncheck identifies functions and methods in Go
source code with known vulnerabilities.

govulncheck can be used to analyze source code with one or more package
patterns (for example, golang.org/x/crypto/...  or ./...), or on a single Go
binary. For Go binaries, module and symbol information will be extracted from
the binary to detect vulnerable symbols.

By default, govulncheck makes requests to the Go vulnerability database
(https://vuln.go.dev). The environment variable GOVULNDB can be set to a
comma-separated list of vulnerability database URLs, with http://, https://, or
file:// protocols. Entries from multiple databases are merged.

For more information, visit https://go.dev/security/vulndb.

Usage:

	govulncheck [flags] {package pattern...}

	govulncheck [flags] {binary path} (if built with Go 1.18 or higher)

Flags:

	-v	Print a full call stack for each vulnerability.

	-json	Print vulnerability findings in JSON format.

	-html	Generate HTML with the vulnerability findings.

	-tags	Comma-separated list of build tags.

	-tests	Boolean flag indicating if test files should be analyzed too.


# Same output as -h, but failure.
$ govulncheck --> FAIL 1
Command govulncheck identifies functions and methods in Go
source code with known vulnerabilities.

govulncheck can be used to analyze source code with one or more package
patterns (for example, golang.org/x/crypto/...  or ./...), or on a single Go
binary. For Go binaries, module and symbol information will be extracted from
the binary to detect vulnerable symbols.

By default, govulncheck makes requests to the Go vulnerability database
(https://vuln.go.dev). The environment variable GOVULNDB can be set to a
comma-separated list of vulnerability database URLs, with http://, https://, or
file:// protocols. Entries from multiple databases are merged.

For more information, visit https://go.dev/security/vulndb.

Usage:

	govulncheck [flags] {package pattern...}

	govulncheck [flags] {binary path} (if built with Go 1.18 or higher)

Flags:

	-v	Print a full call stack for each vulnerability.

	-json	Print vulnerability findings in JSON format.

	-html	Generate HTML with the vulnerability findings.

	-tags	Comma-separated list of build tags.

	-tests	Boolean flag indicating if test files should be analyzed too.
